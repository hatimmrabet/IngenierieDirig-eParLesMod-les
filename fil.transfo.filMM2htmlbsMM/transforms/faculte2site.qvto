modeltype filMM "strict" uses "http://www.example.org/fIL";
modeltype htmlbsMM "strict" uses "http://www.example.org/htmlbsMM";

transformation faculte2site(in fil : filMM, out html : htmlbsMM );

main() {
	fil.rootObjects().oclAsType(Faculte) -> map faculte2Site();
}

mapping filMM::Faculte::faculte2Site() : htmlbsMM::Site {
	name := self.name;
	self.niveaux -> forEach(niveau) {
		niveau.ues -> forEach(ue) {
			pages += ue -> map ue2Page();
		};
		niveau.formations -> forEach(formation) {
			pages += formation -> map formation2Page();
		};
		niveau.ues -> forEach(ue) {
			 html.objectsOfType(Page)->selectOne(p: Page | p.name = ue.name+" - "+ue.pseudo).blocks += ue -> map formationsDeUe2Block();
		};
		pages += niveau -> map niveau2Page();
		redirections += pages->select(p: Page | p.name = niveau.name);
	};
}

/** Presentation **/

mapping filMM::Presentation::presentation2Block() : htmlbsMM::Title when { self.contenue->notEmpty() } {
	level := 3;
	text := "Presentation :";
	elements += object Text {text := self.contenue }
}

/** Niveau **/

mapping filMM::Niveau::niveau2Page() : htmlbsMM::Page {
	name := self.name;
	blocks += self.presentation -> map presentation2Block();
	blocks += self -> map responsables2Block();
	blocks += self -> map formations2Block();
	blocks += self -> map ues2Block();
}

mapping filMM::Niveau::responsables2Block() : htmlbsMM::Title when{ self.responsables ->notEmpty() } {
	level := 4;
	text := "Responsables :";
	self.responsables -> forEach(responsable) {
		elements += object Text {text := responsable.name +" "+responsable.prenom }
	}
}

mapping filMM::Niveau::formations2Block() : htmlbsMM::Title when {self.formations -> notEmpty()} {
	level := 4;
	text := "Formations :";
	self.formations -> forEach(formation) {
		elements += object Button {text := formation.name; page := html.objectsOfType(Page)->selectOne(p: Page | p.name = formation.name+" - "+formation.pseudo)};
	}
}

mapping filMM::Niveau::ues2Block() : htmlbsMM::Title {
	level := 4;
	text := "Liste des UEs :";
	if (self.ues->notEmpty())
	{
		self.ues -> forEach(ue){
			elements += object Button {text := ue.pseudo; page := html.objectsOfType(Page)->selectOne(p: Page | p.name = ue.name+" - "+ue.pseudo)}
		};
	}else{
		elements += object Text {text := "Pas d'UE pour cette formation" };
	};
}

/** Formation **/

mapping filMM::Formation::formation2Page() : htmlbsMM::Page {
	name := self.name+" - "+self.pseudo;
	blocks += self.presentation -> map presentation2Block();
	blocks += self -> map responsables2Block();
	blocks += self -> map enseignants2Block();
	blocks += self -> map documents2Block();
	blocks += self -> map semestre1Block();
	blocks += self.s1 -> map ueObligatoires2Block();
	blocks += self.s1 -> map ueOptionnelles2Block();
	blocks += self -> map semestre2Block();
	blocks += self.s2 -> map ueObligatoires2Block();
	blocks += self.s2 -> map ueOptionnelles2Block();
}

mapping filMM::Formation::responsables2Block() : htmlbsMM::Title when {self.responsables -> notEmpty()} {
	level := 4;
	text := "Responsables :";
	self.responsables -> forEach(responsable) {
		elements += object Text {text := responsable.name +" "+responsable.prenom }
	}
}

mapping filMM::Formation::enseignants2Block() : htmlbsMM::Title when {self.enseignants -> notEmpty()} {
	level := 4;
	text := "Enseignants :";
	self.enseignants -> forEach(enseignant) {
		elements += object Text {text := enseignant.name +" "+enseignant.prenom }
	}
}

mapping filMM::Formation::documents2Block() : htmlbsMM::Title when {self.documents -> notEmpty()} {
	level := 4;
	text := "Documents :";
	self.documents -> forEach(doc) {
		elements += object Link {text := doc.name; lien := doc.lien}
	}
}

mapping filMM::Formation::semestre1Block() : htmlbsMM::Title {
	level := 3;
	text := "Semestre 1 :";
	if(self.s1->isEmpty()){
		elements += object Text {text := "Pas d'informations pour le moment !" }
	}else{
		elements += object Text {text := "Les cours du premier semestre." }
	}
}

mapping filMM::Formation::semestre2Block() : htmlbsMM::Title {
	level := 3;
	text := "Semestre 2 :";
	if(self.s2->isEmpty()){
		elements += object Text {text := "Pas d'informations pour le moment !" }
	}else{
		elements += object Text {text := "Les cours du deuxieme semestre." }
	}
}


/** SEMESTRE **/

mapping filMM::Semestre::ueObligatoires2Block() : htmlbsMM::Title when {self.uesobligatoires -> notEmpty()} {
	level := 5;
	text := "UE obligatoires :";
	self.uesobligatoires -> forEach(ue) {
		elements += object Button {text := ue.pseudo; page := html.objectsOfType(Page)->selectOne(p: Page | p.name = ue.name+" - "+ue.pseudo)}
	}
}

mapping filMM::Semestre::ueOptionnelles2Block() : htmlbsMM::Title when {self.uesoptionnelles -> notEmpty()} {
	level := 5;
	text := "UE optionnelles :";
	self.uesoptionnelles -> forEach(ue) {
		elements += object Button {text := ue.pseudo; page := html.objectsOfType(Page)->selectOne(p: Page | p.name = ue.name+" - "+ue.pseudo)}
	}
}

/** UE **/

mapping filMM::UE::ue2Page() : htmlbsMM::Page {
	name := self.name +" - "+self.pseudo;
	blocks += self.presentation -> map presentation2Block();
	blocks += self -> map responsables2Block();
	blocks += self -> map enseignants2Block();
	blocks += self -> map documents2Block();
}

mapping filMM::UE::responsables2Block() : htmlbsMM::Title when {self.responsables -> notEmpty()} {
	level := 4;
	text := "Responsables :";
	self.responsables -> forEach(responsable) {
		elements += object Text {text := responsable.name +" "+responsable.prenom }
	}
}

mapping filMM::UE::enseignants2Block() : htmlbsMM::Title when {self.enseignants -> notEmpty()} {
	level := 4;
	text := "Enseignants :";
	self.enseignants -> forEach(enseignant) {
		elements += object Text {text := enseignant.name +" "+enseignant.prenom }
	}
}

mapping filMM::UE::documents2Block() : htmlbsMM::Title when {self.documents -> notEmpty()} {
	level := 4;
	text := "Documents :";
	self.documents -> forEach(doc) {
		elements += object Link {text := doc.name; lien := doc.lien}
	}
}

mapping filMM::UE::formationsDeUe2Block() : htmlbsMM::Title {
	level := 4;
	text := "Les formations qui enseignent cette UE :";
	var formations : List(Formation) := List{};
	fil.objectsOfType(Formation)->forEach(formation){
		formation.s1.uesoptionnelles -> forEach(ue){
			if(ue = self)
			{
				formations->add(formation);
			}
		};
		formation.s1.uesobligatoires -> forEach(ue){
			if(ue = self)
			{
				formations->add(formation);
			}
		};
		formation.s2.uesoptionnelles -> forEach(ue){
			if(ue = self)
			{
				formations->add(formation);
			}
		};
		formation.s2.uesobligatoires -> forEach(ue){
			if(ue = self)
			{
				formations->add(formation);
			
			}
		};
	};
	formations->asSet()->forEach(formation){
		elements += object Button {text := formation.name; page := html.objectsOfType(Page)->selectOne(p: Page | p.name = formation.name+" - "+formation.pseudo)}
	}
}
