/*
 * generated by Xtext 2.25.0
 */
package fil.xtextfil.serializer;

import com.google.inject.Inject;
import fIL.FILPackage;
import fIL.Faculte;
import fIL.Intervenant;
import fIL.Niveau;
import fil.xtextfil.services.LangFilGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class LangFilSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LangFilGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FILPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FILPackage.FACULTE:
				sequence_Faculte(context, (Faculte) semanticObject); 
				return; 
			case FILPackage.INTERVENANT:
				sequence_Intervenant(context, (Intervenant) semanticObject); 
				return; 
			case FILPackage.NIVEAU:
				sequence_Niveau(context, (Niveau) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Faculte returns Faculte
	 *
	 * Constraint:
	 *     (nom=EString (niveaux+=Niveau niveaux+=Niveau*)? (intervenants+=Intervenant intervenants+=Intervenant*)?)
	 */
	protected void sequence_Faculte(ISerializationContext context, Faculte semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Intervenant returns Intervenant
	 *
	 * Constraint:
	 *     (nom=ID prenom=STRING?)
	 */
	protected void sequence_Intervenant(ISerializationContext context, Intervenant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Niveau returns Niveau
	 *
	 * Constraint:
	 *     (nom=EString? pseudo=EString?)
	 */
	protected void sequence_Niveau(ISerializationContext context, Niveau semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
