/*
 * generated by Xtext 2.25.0
 */
grammar InternalLangFil;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fil.xtextfil.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fil.xtextfil.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fil.xtextfil.services.LangFilGrammarAccess;

}

@parser::members {

 	private LangFilGrammarAccess grammarAccess;

    public InternalLangFilParser(TokenStream input, LangFilGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Faculte";
   	}

   	@Override
   	protected LangFilGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFaculte
entryRuleFaculte returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFaculteRule()); }
	iv_ruleFaculte=ruleFaculte
	{ $current=$iv_ruleFaculte.current; }
	EOF;

// Rule Faculte
ruleFaculte returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Faculte'
		{
			newLeafNode(otherlv_0, grammarAccess.getFaculteAccess().getFaculteKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFaculteAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='nom'
		{
			newLeafNode(otherlv_2, grammarAccess.getFaculteAccess().getNomKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFaculteAccess().getNomEStringParserRuleCall_3_0());
				}
				lv_nom_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFaculteRule());
					}
					set(
						$current,
						"nom",
						lv_nom_3_0,
						"fil.xtextfil.LangFil.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='niveaux'
			{
				newLeafNode(otherlv_4, grammarAccess.getFaculteAccess().getNiveauxKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getFaculteAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFaculteAccess().getNiveauxNiveauParserRuleCall_4_2_0());
					}
					lv_niveaux_6_0=ruleNiveau
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFaculteRule());
						}
						add(
							$current,
							"niveaux",
							lv_niveaux_6_0,
							"fil.xtextfil.LangFil.Niveau");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getFaculteAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFaculteAccess().getNiveauxNiveauParserRuleCall_4_3_1_0());
						}
						lv_niveaux_8_0=ruleNiveau
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFaculteRule());
							}
							add(
								$current,
								"niveaux",
								lv_niveaux_8_0,
								"fil.xtextfil.LangFil.Niveau");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getFaculteAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_10='intervenants'
			{
				newLeafNode(otherlv_10, grammarAccess.getFaculteAccess().getIntervenantsKeyword_5_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getFaculteAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFaculteAccess().getIntervenantsIntervenantParserRuleCall_5_2_0());
					}
					lv_intervenants_12_0=ruleIntervenant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFaculteRule());
						}
						add(
							$current,
							"intervenants",
							lv_intervenants_12_0,
							"fil.xtextfil.LangFil.Intervenant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getFaculteAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFaculteAccess().getIntervenantsIntervenantParserRuleCall_5_3_1_0());
						}
						lv_intervenants_14_0=ruleIntervenant
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFaculteRule());
							}
							add(
								$current,
								"intervenants",
								lv_intervenants_14_0,
								"fil.xtextfil.LangFil.Intervenant");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getFaculteAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getFaculteAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNiveau
entryRuleNiveau returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNiveauRule()); }
	iv_ruleNiveau=ruleNiveau
	{ $current=$iv_ruleNiveau.current; }
	EOF;

// Rule Niveau
ruleNiveau returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNiveauAccess().getNiveauAction_0(),
					$current);
			}
		)
		otherlv_1='Niveau'
		{
			newLeafNode(otherlv_1, grammarAccess.getNiveauAccess().getNiveauKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNiveauAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='nom'
			{
				newLeafNode(otherlv_3, grammarAccess.getNiveauAccess().getNomKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNiveauAccess().getNomEStringParserRuleCall_3_1_0());
					}
					lv_nom_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNiveauRule());
						}
						set(
							$current,
							"nom",
							lv_nom_4_0,
							"fil.xtextfil.LangFil.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='pseudo'
			{
				newLeafNode(otherlv_5, grammarAccess.getNiveauAccess().getPseudoKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNiveauAccess().getPseudoEStringParserRuleCall_4_1_0());
					}
					lv_pseudo_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNiveauRule());
						}
						set(
							$current,
							"pseudo",
							lv_pseudo_6_0,
							"fil.xtextfil.LangFil.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getNiveauAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleIntervenant
entryRuleIntervenant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervenantRule()); }
	iv_ruleIntervenant=ruleIntervenant
	{ $current=$iv_ruleIntervenant.current; }
	EOF;

// Rule Intervenant
ruleIntervenant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntervenantAccess().getIntervenantAction_0(),
					$current);
			}
		)
		otherlv_1='Intervenant'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntervenantAccess().getIntervenantKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervenantAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='nom'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntervenantAccess().getNomKeyword_3());
		}
		(
			(
				lv_nom_4_0=RULE_ID
				{
					newLeafNode(lv_nom_4_0, grammarAccess.getIntervenantAccess().getNomIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntervenantRule());
					}
					setWithLastConsumed(
						$current,
						"nom",
						lv_nom_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_5='prenom'
			{
				newLeafNode(otherlv_5, grammarAccess.getIntervenantAccess().getPrenomKeyword_5_0());
			}
			(
				(
					lv_prenom_6_0=RULE_STRING
					{
						newLeafNode(lv_prenom_6_0, grammarAccess.getIntervenantAccess().getPrenomSTRINGTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntervenantRule());
						}
						setWithLastConsumed(
							$current,
							"prenom",
							lv_prenom_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getIntervenantAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
