modeltype filMM "strict" uses "http://www.example.org/fIL";
modeltype markdownMM "strict" uses "http://www.example.org/simplemarkdown";


transformation formation2block(in fil : filMM, out md : markdownMM );

main() {
	fil.rootObjects().oclAsType(Faculte) -> map faculte2Title();
}

mapping filMM::Faculte::faculte2Title() : markdownMM::Document {
	name := self.nom;
	self.niveaux -> forEach(niveau){
		contents += niveau -> map niveau2Title();
		niveau.formations -> forEach(formation){
			contents += formation -> map formation2Title(); //affichage du nom de formation
			if(formation.presentation -> notEmpty()) //affichage du presentation du formation si elle existe
				contents += formation -> map presentationFormationParagraph(); 
			contents += formation.s1 -> map s1FormationBlock(); //affichage du s1
			formation.s1.ues -> forEach(ue){
				contents += ue -> map ueTitre();
				if(ue.presentation -> notEmpty())
					contents += ue -> map uePresentationParagraph();
			};
			contents += formation.s2 -> map s2FormationBlock(); //affichage du s2
			formation.s2.ues -> forEach(ue){
				contents += ue -> map ueTitre();
				if(ue.presentation -> notEmpty())
					contents += ue -> map uePresentationParagraph();
			};
		}
	}
}

/** Niveau **/
mapping filMM::Niveau::niveau2Title() : markdownMM::Title {
	level := 1;
	elements += self -> map niveau2Text();
}
mapping filMM::Niveau::niveau2Text() : markdownMM::Text {
	text := self.nom+' - '+self.pseudo;
}

/** Formation **/
mapping filMM::Formation::formation2Title() : markdownMM::Title {
	level := 2;
	elements += self -> map formation2Text();
}
mapping filMM::Formation::formation2Text() : markdownMM::Text {
	text := self.nom+' - '+self.pseudo;
}
mapping filMM::Formation::presentationFormationParagraph() : markdownMM::Paragraph {
	elements += self.presentation -> map presentationText();
}

/** Presentation**/
mapping filMM::Presentation::presentationText() : markdownMM::Text {
	text := self.contenue;
}

/** UE **/
mapping filMM::UE::ueTitre() : markdownMM::Title {
	level := 4;
	elements += self -> map ueTitreText();
}
mapping filMM::UE::ueTitreText() : markdownMM::Text {
	text := self.pseudo;
}
mapping filMM::UE::uePresentationParagraph() : markdownMM::Paragraph {
	elements += self.presentation -> map presentationText();
}

/** S1 **/
mapping filMM::S1::s1FormationBlock() : markdownMM::Title {
	level := 3;
	elements += self -> map s1FormationTitre();
}
mapping filMM::S1::s1FormationTitre() : markdownMM::Text {
	text := 'S1';
}

/** S2 **/
mapping filMM::S2::s2FormationBlock() : markdownMM::Title {
	level := 3;
	elements += self -> map s2FormationTitre();
}
mapping filMM::S2::s2FormationTitre() : markdownMM::Text {
	text := 'S2';
}