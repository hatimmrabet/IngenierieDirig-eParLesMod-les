modeltype filMM "strict" uses "http://www.example.org/fIL";
modeltype markdownMM "strict" uses "http://www.example.org/simplemarkdown";


transformation formation2block(in fil : filMM, out md : markdownMM );

main() {
	fil.rootObjects().oclAsType(Faculte) -> map faculte2Title();
}

mapping filMM::Faculte::faculte2Title() : markdownMM::Document {
	name := self.nom;
	self.niveaux -> forEach(niveau){
		contents += niveau -> map niveau2Title();
		niveau.formations -> forEach(formation){
			contents += formation -> map formation2Title(); //affichage du nom de formation
			contents += formation.presentation -> map presentationParagraph(); //affichage du presentation du formation si elle existe
			// Intervenants formations
			contents += formation -> map responsablesParagraph();
			contents += formation -> map enseignantsParagraph();
			
			//affichage du s1
			contents += formation.s1 -> map s1FormationBlock(); 
			
			//UEs oblig s1 
			contents += formation.s1.uesobligatoires -> map ueType("UES OBLIGATOIRES :");
			contents += formation.s1.uesobligatoires -> forEach(ue){
				contents += ue -> map ueTitre(formation.s1);
				contents += ue.presentation -> map presentationParagraph(formation.s1);
				contents += ue -> map responsablesParagraph(formation.s1);
				contents += ue -> map enseignantsParagraph(formation.s1);
				contents += ue -> map documentsParagraph(formation.s1);				
			};
			
			//UEs optio s1
			contents += formation.s1.uesoptionnelles -> map ueType("UES OPTIONNELLES :");
			contents += formation.s1.uesoptionnelles -> forEach(ue){
				contents += ue -> map ueTitre(formation.s1);
				contents += ue.presentation -> map presentationParagraph(formation.s1);
				contents += ue -> map responsablesParagraph(formation.s1);
				contents += ue -> map enseignantsParagraph(formation.s1);
				contents += ue -> map documentsParagraph(formation.s1);								
			};
			
			//affichage du s2
			contents += formation.s2 -> map s2FormationBlock(); 
			
			//UEs oblig s2
			contents += formation.s2.uesobligatoires -> map ueType("UES OBLIGATOIRES :");
			contents += formation.s2.uesobligatoires -> forEach(ue){
				contents += ue -> map ueTitre(formation.s2);
				contents += ue.presentation -> map presentationParagraph(formation.s1);
				contents += ue -> map responsablesParagraph(formation.s2);
				contents += ue -> map enseignantsParagraph(formation.s2);
				contents += ue -> map documentsParagraph(formation.s2);				
			};
			
			//UEs optio s2
			contents += formation.s2.uesoptionnelles -> map ueType("UES OPTIONNELLES :");
			contents += formation.s2.uesoptionnelles-> forEach(ue){
				contents += ue -> map ueTitre(formation.s2);
				contents += ue.presentation -> map presentationParagraph(formation.s1);
				contents += ue -> map responsablesParagraph(formation.s2);
				contents += ue -> map enseignantsParagraph(formation.s2);
				contents += ue -> map documentsParagraph(formation.s2);
			};
			
		}
	}
}

/** Niveau **/
mapping filMM::Niveau::niveau2Title() : markdownMM::Title {
	level := 1;
	elements += self -> map niveau2Text();
}
mapping filMM::Niveau::niveau2Text() : markdownMM::Text {
	text := self.nom+' - '+self.pseudo;
}

/** Formation **/
mapping filMM::Formation::formation2Title() : markdownMM::Title {
	level := 2;
	elements += self -> map formation2Text();
}
mapping filMM::Formation::formation2Text() : markdownMM::Text {
	text := self.nom+' - '+self.pseudo;
}

/** Presentation**/
mapping filMM::Presentation::presentationParagraph(in owner : Semestre) : markdownMM::Paragraph {
	elements += object Text {text := self.contenue};
}
mapping filMM::Presentation::presentationParagraph() : markdownMM::Paragraph {
	elements += object Text {text := self.contenue};
}

/** UE **/
mapping Set(UE)::ueType(titre : String) : markdownMM::Title when{self -> notEmpty() }{
	level := 3; 
	elements += object StrongEmphasis { text := titre};
}
mapping filMM::UE::ueTitre(in owner : Semestre) : markdownMM::Title {
	level := 4;
	elements += object Text {text := self.pseudo +' - '+self.nom};
}


/** S1 **/
mapping filMM::S1::s1FormationBlock() : markdownMM::Title {
	level := 3;
	elements += self -> map s1FormationTitre();
}
mapping filMM::S1::s1FormationTitre() : markdownMM::Text {
	text := 'S1';
}

/** S2 **/
mapping filMM::S2::s2FormationBlock() : markdownMM::Title {
	level := 3;
	elements += self -> map s2FormationTitre();
}
mapping filMM::S2::s2FormationTitre() : markdownMM::Text {
	text := 'S2';
}

/** Intervenant **/
mapping filMM::UE::responsablesParagraph(in owner : Semestre) : markdownMM::Paragraph when{self.responsables -> notEmpty()}{
	elements += object StrongEmphasis { text := "Responsables :" };
	self.responsables -> forEach(int){
		elements += object Text { text := int.nom +' '+int.prenom};
	}	
}
mapping filMM::UE::enseignantsParagraph(in owner : Semestre) : markdownMM::Paragraph when{self.enseignants -> notEmpty()}{
	elements += object StrongEmphasis { text := "Enseignants :" };
	self.enseignants -> forEach(int){
		elements += object Text { text := int.nom +' '+int.prenom};
	}		
}
mapping filMM::Formation::responsablesParagraph() : markdownMM::Paragraph when{self.responsables -> notEmpty()}{
	elements += object StrongEmphasis { text := "Responsables :" };
	self.responsables -> forEach(int){
		elements += object Text { text := int.nom +' '+int.prenom};
	}	
}
mapping filMM::Formation::enseignantsParagraph() : markdownMM::Paragraph when{self.enseignants -> notEmpty()}{
	elements += object StrongEmphasis { text := "Enseignants :" };
	self.enseignants -> forEach(int){
		elements += object Text { text := int.nom +' '+int.prenom};
	}		
}

/** Documents **/
mapping filMM::UE::documentsParagraph(in owner : Semestre) : markdownMM::Paragraph when {self.documents -> notEmpty()}{
	elements += object StrongEmphasis { text := "Documents :" };
	self.documents -> forEach(doc){
		elements += object Link { 
						title := doc.nom;
						url := doc.lien; 
						};
	}	
}