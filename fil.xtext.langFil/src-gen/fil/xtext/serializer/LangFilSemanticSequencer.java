/*
 * generated by Xtext 2.25.0
 */
package fil.xtext.serializer;

import com.google.inject.Inject;
import fIL.Audio;
import fIL.FILPackage;
import fIL.Faculte;
import fIL.Fichier;
import fIL.Formation;
import fIL.Intervenant;
import fIL.Niveau;
import fIL.Presentation;
import fIL.S1;
import fIL.S2;
import fIL.UE;
import fIL.Video;
import fil.xtext.services.LangFilGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LangFilSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LangFilGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FILPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FILPackage.AUDIO:
				sequence_Audio(context, (Audio) semanticObject); 
				return; 
			case FILPackage.FACULTE:
				sequence_Faculte(context, (Faculte) semanticObject); 
				return; 
			case FILPackage.FICHIER:
				sequence_Fichier(context, (Fichier) semanticObject); 
				return; 
			case FILPackage.FORMATION:
				sequence_Formation(context, (Formation) semanticObject); 
				return; 
			case FILPackage.INTERVENANT:
				sequence_Intervenant(context, (Intervenant) semanticObject); 
				return; 
			case FILPackage.NIVEAU:
				sequence_Niveau(context, (Niveau) semanticObject); 
				return; 
			case FILPackage.PRESENTATION:
				sequence_Presentation(context, (Presentation) semanticObject); 
				return; 
			case FILPackage.S1:
				sequence_S1(context, (S1) semanticObject); 
				return; 
			case FILPackage.S2:
				sequence_S2(context, (S2) semanticObject); 
				return; 
			case FILPackage.UE:
				sequence_UE(context, (UE) semanticObject); 
				return; 
			case FILPackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Document returns Audio
	 *     Audio returns Audio
	 *
	 * Constraint:
	 *     (name=EString description=EString? lien=EString duree=EString?)
	 */
	protected void sequence_Audio(ISerializationContext context, Audio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Faculte returns Faculte
	 *
	 * Constraint:
	 *     (name=EString (niveaux+=Niveau | intervenants+=Intervenant)*)
	 */
	protected void sequence_Faculte(ISerializationContext context, Faculte semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Document returns Fichier
	 *     Fichier returns Fichier
	 *
	 * Constraint:
	 *     (name=EString description=EString? lien=EString auteur=EString?)
	 */
	protected void sequence_Fichier(ISerializationContext context, Fichier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formation returns Formation
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (pseudo=EString | presentation=Presentation | s1=S1 | s2=S2 | documents+=Document)? 
	 *             (responsables+=[Intervenant|EString] responsables+=[Intervenant|EString]*)? 
	 *             (enseignants+=[Intervenant|EString] enseignants+=[Intervenant|EString]*)?
	 *         )+
	 *     )
	 */
	protected void sequence_Formation(ISerializationContext context, Formation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Intervenant returns Intervenant
	 *
	 * Constraint:
	 *     (name=EString prenom=EString?)
	 */
	protected void sequence_Intervenant(ISerializationContext context, Intervenant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Niveau returns Niveau
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (pseudo=EString | presentation=Presentation | formations+=Formation | ues+=UE)? 
	 *             (responsables+=[Intervenant|EString] responsables+=[Intervenant|EString]*)?
	 *         )+
	 *     )
	 */
	protected void sequence_Niveau(ISerializationContext context, Niveau semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Presentation returns Presentation
	 *
	 * Constraint:
	 *     contenue=EString
	 */
	protected void sequence_Presentation(ISerializationContext context, Presentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FILPackage.Literals.PRESENTATION__CONTENUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FILPackage.Literals.PRESENTATION__CONTENUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPresentationAccess().getContenueEStringParserRuleCall_2_0(), semanticObject.getContenue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     S1 returns S1
	 *
	 * Constraint:
	 *     ((uesoptionnelles+=[UE|EString] uesoptionnelles+=[UE|EString]*)? (uesobligatoires+=[UE|EString] uesobligatoires+=[UE|EString]*)?)
	 */
	protected void sequence_S1(ISerializationContext context, S1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     S2 returns S2
	 *
	 * Constraint:
	 *     ((uesoptionnelles+=[UE|EString] uesoptionnelles+=[UE|EString]*)? (uesobligatoires+=[UE|EString] uesobligatoires+=[UE|EString]*)?)
	 */
	protected void sequence_S2(ISerializationContext context, S2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UE returns UE
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (pseudo=EString | presentation=Presentation | documents+=Document)? 
	 *             (responsables+=[Intervenant|EString] responsables+=[Intervenant|EString]*)? 
	 *             (enseignants+=[Intervenant|EString] enseignants+=[Intervenant|EString]*)?
	 *         )+
	 *     )
	 */
	protected void sequence_UE(ISerializationContext context, UE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Document returns Video
	 *     Video returns Video
	 *
	 * Constraint:
	 *     (name=EString description=EString? lien=EString duree=EString?)
	 */
	protected void sequence_Video(ISerializationContext context, Video semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
